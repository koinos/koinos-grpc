language: c++

cache:
  ccache: true

addons:
  apt:
    update: true
    packages:
      - clang
      - clang-format
      - llvm
      - llvm-dev
      - lcov
      - ruby
      - gcc-12
      - g++-12
      - golang-go

env:
  global:
    - CMAKE_C_COMPILER_LAUNCHER=ccache
    - CMAKE_CXX_COMPILER_LAUNCHER=ccache

jobs:
  include:
    - name: "Static Analysis"
      os: linux
      dist: jammy
      env:
        - CC=clang
        - CXX=clang++
      before_script:
        - cmake -DCMAKE_BUILD_TYPE=Debug -DSTATIC_ANALYSIS=ON .
      script:
        - cmake --build . --config Debug --parallel 3

    - name: "Sanitizer"
      os: linux
      dist: jammy
      env:
        - CC=clang
        - CXX=clang++
      before_script:
        - mkdir build-address
        - pushd build-address
        - cmake -DCMAKE_BUILD_TYPE=Debug -DSANITIZER=Address ..
        - cmake --build . --config Debug --parallel 3
        - popd
        - mkdir build-stack
        - pushd build-stack
        - cmake -DCMAKE_BUILD_TYPE=Debug -DSANITIZER=Stack ..
        - cmake --build . --config Debug --parallel 3
        - popd
        - mkdir build-thread
        - pushd build-thread
        - cmake -DCMAKE_BUILD_TYPE=Debug -DSANITIZER=Thread ..
        - cmake --build . --config Debug --parallel 3
        - popd
      script:
        - pushd build-address/tests
        - ctest -j1 --output-on-failure
        - popd
        - pushd build-stack/tests
        - ctest -j1 --output-on-failure
        - popd
        - pushd build-thread/tests
        - ctest -j1 --output-on-failure

    - name: "Coverage"
      os: linux
      dist: jammy
      env:
        - CC=clang
        - CXX=clang++
      install:
        - sudo gem install coveralls-lcov
      before_script:
        - mkdir build
        - cd build
        - cmake -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON ..
      script:
        - cmake --build . --config Debug --parallel 3 --target coverage
      after_success:
        - coveralls-lcov --repo-token $COVERALLS_REPO_TOKEN --service-name travis-pro --service-job-id $TRAVIS_JOB_ID ./coverage.info

    - name: "GCC Unit Tests"
      os: linux
      dist: jammy
      env:
        - CC=gcc-12
        - CXX=g++-12
      before_script:
        - cmake -DCMAKE_BUILD_TYPE=Release .
        - cmake --build . --config Release --parallel 3
      script:
        - cd tests
        - ctest -j3 --output-on-failure

    - name: "Clang Unit Tests and Formatting"
      os: linux
      dist: jammy
      env:
        - CC=clang
        - CXX=clang++
      before_script:
        - cmake -DCMAKE_BUILD_TYPE=Release .
        - cmake --build . --config Release --parallel 3
      script:
        - cmake --build . --config Release --parallel 3 --target format.check
        - cd tests
        - ctest -j3 --output-on-failure

    - name: "Docker and Integration Tests"
      os: linux
      dist: jammy
      services:
        - docker
      env:
        - TAG=`if [ $TRAVIS_BRANCH == "master" ]; then echo -n latest; else echo -n $TRAVIS_BRANCH; fi`
        - GRPC_TAG=$TAG
      install:
        - git clone https://github.com/koinos/koinos-integration-tests.git
        - pushd koinos-integration-tests
        - go get ./...
        - popd
      before_script:
        - cp -R ~/.ccache ./ccache
        - docker build . -t build --target builder
        - docker build . -t $TRAVIS_REPO_SLUG:$TAG
        - docker run -td --name extract-ccache build
        - docker cp extract-ccache:/build/.ccache ~/.ccache
      script:
        - pushd koinos-integration-tests
        - ./run.sh
      after_success:
        - |
          if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push $TRAVIS_REPO_SLUG:$TAG
          fi

notifications:
  slack:
    secure: cTHSV2ZeQgQWJ/l9RWHshOsg6X9QQFw3W1HcuD1TmPxAreWJqd2uXY5OqOlXUWfHE1zVKjXf2BY3egZn6ugaXZHXq4DaMb9uCdI/PlsY/srCL955wHpUX/wqrZgFrBptaiBvGOfsVEjEpfR/qPOUDdSFp/W//xshNWj7qLvqD/bHacioLYlpUlMdAq6nYYq5ekggw0A90NSP+UBtgGZHk95UCw1VVEU69CoaZeBKSSbempp2aFm6v1YIGmzbF6DD7VDKjwIH5avvpIJ7HVfLiICmqEEgBN3Yugi1aLs+8Jv5GffbkgEtFcQPjBhkqHDYGyOOsg3NJD9DORA41lJHYTug+zt6ZO/ItmaCxitnavKp6/0rai7pWV5QocnaRfavMcsaNKFHM/dyu+pkuiNrvmsKphTJetyFR6f+tIzxMbXOgcm6OA1WzQ0GozvpVpLeUeReQXl4TncSrWlYUPY+jZsQp7QOHRBA4sqaOpjkMEjC3gzMbHU/Ec/n3Nau28bGZjMupw3XUHeWbxdLWZ/hO0II9TYPe5PzEkoQOhZ4smOPKMhIuGi5oar0kzDb/3EsFdRyZ6Zxnf2Ihx8HhZuTx2MjnMfVvLWUrrcnRa1shcxBHjd1KyfcLoDEzLGarQmoeaWH6Z1EShivMtQ/PyMD1QzM3o7Ct4YJaqa174qg3ig=
    on_success: never